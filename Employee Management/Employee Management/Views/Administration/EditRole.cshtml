@model EditRoleViewModel

@{
    ViewData["Title"] = "EditRole";
}

<h1>Edit Role</h1>

<hr />
<div class="row">
    <div class="col-md-8">
        <form method="post" asp-action="EditRole">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="Id" class="control-label"></label>
                <input asp-for="Id" disabled class="form-control" />
                <span asp-validation-for="Id" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="RoleName" class="control-label"></label>
                <input asp-for="RoleName" class="form-control" />
                <span asp-validation-for="RoleName" class="text-danger"></span>
            </div>
            <div class="form-group">
                <input type="submit" value="Save" class="btn btn-primary" />
                <a asp-action="ListRoles" class="btn btn-primary">Cancel</a>
            </div>

            <div class="card">
                <div class="card-header">
                    <h3>Users in this role</h3>
                </div>
                <div class="card-body">
                    @if(Model.Users.Any())
                    {
                        foreach(var user in Model.Users)
                        {
                            <h5 class="card-title">@user</h5>
                        }
                    }
                    else
                    {
                        <h5 class="card-title">None at the moment</h5>
                    }
                </div>
                <div class="card-footer">
                    <a asp-action="EditUsersInRole" asp-controller="Administration" asp-route-roleId="@Model.Id" class="btn btn-primary" style="width:auto">Add or Remove Users</a>
                </div>
            </div>
        </form>
    </div>
</div>


@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}
